import os
from fastapi import FastAPI, WebSocket
from dotenv import load_dotenv
from websocket_manager import WebSocketManager
from agentic_api_planner import AgenticAPIPlanner
from load_test import run_load_test

load_dotenv()  # Load environment variables

app = FastAPI()
ws_manager = WebSocketManager()

BASE_URL = os.getenv("BASE_URL", "http://localhost:8000")
SPEC_PATH = os.getenv("SPEC_PATH", "specs/petstore.yaml")

# Initialize planner with the production-ready spec
api_planner = AgenticAPIPlanner(openapi_spec_path=SPEC_PATH)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await ws_manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # Here you can add processing logic to interpret user commands
            await ws_manager.send_message(f"Received: {data}", msg_type="user")
    except Exception as e:
        await ws_manager.disconnect(websocket)

@app.post("/plan_execution")
async def plan_execution():
    sequence = api_planner.generate_execution_plan()
    return {"message": "API sequence generated", "sequence": sequence}

@app.post("/load_test")
async def load_test_endpoint(users: int = 10):
    # Run load test asynchronously
    await run_load_test(users=users)
    return {"message": "Load test initiated"}
